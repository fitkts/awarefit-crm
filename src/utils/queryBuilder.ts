/**
 * SQL ÏøºÎ¶¨ ÎπåÎçî - ÌååÎùºÎØ∏ÌÑ∞ ÏïàÏ†ÑÏÑ± Î≥¥Ïû•
 *
 * Ïù¥ ÌÅ¥ÎûòÏä§Îäî ÎèôÏ†Å SQL ÏøºÎ¶¨Î•º ÏïàÏ†ÑÌïòÍ≤å ÏÉùÏÑ±ÌïòÍ≥† ÌååÎùºÎØ∏ÌÑ∞ Î∞îÏù∏Îî©ÏùÑ Î≥¥Ïû•Ìï©ÎãàÎã§.
 * Î∞©Í∏à Í≤™ÏùÄ "Too few parameter values" Ïò§Î•ò Í∞ôÏùÄ Î¨∏Ï†úÎ•º ÏÇ¨Ï†ÑÏóê Î∞©ÏßÄÌï©ÎãàÎã§.
 */

export interface QueryResult {
  query: string;
  params: any[];
}

export class QueryBuilder {
  private query: string = '';
  private params: any[] = [];
  private debugMode: boolean = process.env.NODE_ENV === 'development';

  constructor(baseQuery: string) {
    this.query = baseQuery;
    this.log('üîç [QueryBuilder] Ï¥àÍ∏∞ ÏøºÎ¶¨:', baseQuery);
  }

  /**
   * Ï°∞Í±¥ Ï∂îÍ∞Ä (WHERE Ï†à)
   */
  addCondition(field: string, value: any, operator: string = '='): this {
    if (value !== undefined && value !== null && value !== '') {
      this.query += ` AND ${field} ${operator} ?`;
      this.params.push(value);
      this.log(`üîç [QueryBuilder] Ï°∞Í±¥ Ï∂îÍ∞Ä: ${field} ${operator} ?`, value);
    }
    return this;
  }

  /**
   * ÎÇ†Ïßú Î≤îÏúÑ ÌïÑÌÑ∞ Ï∂îÍ∞Ä
   */
  addDateRange(field: string, from?: string, to?: string): this {
    if (from) {
      this.query += ` AND ${field} >= ?`;
      this.params.push(from);
      this.log(`üîç [QueryBuilder] ÎÇ†Ïßú ÏãúÏûë: ${field} >= ?`, from);
    }
    if (to) {
      this.query += ` AND ${field} <= ?`;
      this.params.push(to);
      this.log(`üîç [QueryBuilder] ÎÇ†Ïßú ÎÅù: ${field} <= ?`, to);
    }
    return this;
  }

  /**
   * Ïà´Ïûê Î≤îÏúÑ ÌïÑÌÑ∞ Ï∂îÍ∞Ä
   */
  addNumberRange(field: string, min?: number, max?: number): this {
    if (min !== undefined && min !== null) {
      this.query += ` AND ${field} >= ?`;
      this.params.push(min);
      this.log(`üîç [QueryBuilder] Ïà´Ïûê ÏµúÏÜå: ${field} >= ?`, min);
    }
    if (max !== undefined && max !== null) {
      this.query += ` AND ${field} <= ?`;
      this.params.push(max);
      this.log(`üîç [QueryBuilder] Ïà´Ïûê ÏµúÎåÄ: ${field} <= ?`, max);
    }
    return this;
  }

  /**
   * IN Ï°∞Í±¥ Ï∂îÍ∞Ä
   */
  addInCondition(field: string, values: any[]): this {
    if (values && values.length > 0) {
      const placeholders = values.map(() => '?').join(', ');
      this.query += ` AND ${field} IN (${placeholders})`;
      this.params.push(...values);
      this.log(`üîç [QueryBuilder] IN Ï°∞Í±¥: ${field} IN (${placeholders})`, values);
    }
    return this;
  }

  /**
   * LIKE Ï°∞Í±¥ Ï∂îÍ∞Ä (Í≤ÄÏÉâ)
   */
  addLikeCondition(field: string, value: string): this {
    if (value && value.trim()) {
      this.query += ` AND ${field} LIKE ?`;
      this.params.push(`%${value}%`);
      this.log(`üîç [QueryBuilder] LIKE Ï°∞Í±¥: ${field} LIKE ?`, `%${value}%`);
    }
    return this;
  }

  /**
   * OR Ï°∞Í±¥ Í∑∏Î£π Ï∂îÍ∞Ä
   */
  addOrGroup(conditions: Array<{ field: string; value: any; operator?: string }>): this {
    const validConditions = conditions.filter(
      c => c.value !== undefined && c.value !== null && c.value !== ''
    );

    if (validConditions.length > 0) {
      const orClauses = validConditions.map(c => {
        const operator = c.operator || '=';
        this.params.push(c.value);
        return `${c.field} ${operator} ?`;
      });

      this.query += ` AND (${orClauses.join(' OR ')})`;
      this.log('üîç [QueryBuilder] OR Í∑∏Î£π Ï∂îÍ∞Ä:', orClauses);
    }
    return this;
  }

  /**
   * ORDER BY Ï†à Ï∂îÍ∞Ä
   */
  addOrderBy(field: string, direction: 'ASC' | 'DESC' = 'ASC'): this {
    this.query += ` ORDER BY ${field} ${direction}`;
    this.log(`üîç [QueryBuilder] Ï†ïÎ†¨ Ï∂îÍ∞Ä: ${field} ${direction}`);
    return this;
  }

  /**
   * LIMIT Ï†à Ï∂îÍ∞Ä
   */
  addLimit(limit: number, offset?: number): this {
    this.query += ` LIMIT ?`;
    this.params.push(limit);
    this.log('üîç [QueryBuilder] LIMIT Ï∂îÍ∞Ä:', limit);

    if (offset !== undefined && offset > 0) {
      this.query += ' OFFSET ?';
      this.params.push(offset);
      this.log('üîç [QueryBuilder] OFFSET Ï∂îÍ∞Ä:', offset);
    }
    return this;
  }

  /**
   * COUNT ÏøºÎ¶¨Î°ú Î≥ÄÌôò (ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖòÏö©)
   */
  toCountQuery(): QueryResult {
    // ORDER BY, LIMIT, OFFSET Ï†úÍ±∞
    let countQuery = this.query.replace(/\s+ORDER BY[^]*$/i, '').replace(/\s+LIMIT[^]*$/i, '');

    // SELECT Ï†àÏùÑ COUNT(*)Î°ú ÍµêÏ≤¥
    countQuery = countQuery.replace(/SELECT\s+.*?\s+FROM/i, 'SELECT COUNT(*) as total FROM');

    // LIMITÍ≥º OFFSET ÌååÎùºÎØ∏ÌÑ∞ Ï†úÍ±∞
    const limitCount = (this.query.match(/LIMIT|OFFSET/g) || []).length;
    const countParams = this.params.slice(0, -limitCount);

    this.log('üîç [QueryBuilder] COUNT ÏøºÎ¶¨ ÏÉùÏÑ±:', countQuery);
    this.log('üîç [QueryBuilder] COUNT ÌååÎùºÎØ∏ÌÑ∞:', countParams);

    this.validateQuery(countQuery, countParams);

    return {
      query: countQuery,
      params: countParams,
    };
  }

  /**
   * ÏµúÏ¢Ö ÏøºÎ¶¨ ÎπåÎìú
   */
  build(): QueryResult {
    this.validateQuery(this.query, this.params);

    this.log('üîç [QueryBuilder] ÏµúÏ¢Ö ÏøºÎ¶¨:', this.query);
    this.log('üîç [QueryBuilder] ÏµúÏ¢Ö ÌååÎùºÎØ∏ÌÑ∞:', this.params);

    return {
      query: this.query,
      params: this.params,
    };
  }

  /**
   * ÌååÎùºÎØ∏ÌÑ∞ Í∞úÏàò Í≤ÄÏ¶ù
   */
  private validateQuery(query: string, params: any[]): void {
    const paramCount = (query.match(/\?/g) || []).length;

    if (paramCount !== params.length) {
      const error = new Error(
        `üö® QueryBuilder ÌååÎùºÎØ∏ÌÑ∞ Í∞úÏàò Î∂àÏùºÏπò: ÏøºÎ¶¨ ${paramCount}Í∞ú, ÌååÎùºÎØ∏ÌÑ∞ ${params.length}Í∞ú`
      );
      this.log('üö® [QueryBuilder] Í≤ÄÏ¶ù Ïã§Ìå®:', error.message);
      this.log('üö® [QueryBuilder] ÏøºÎ¶¨:', query);
      this.log('üö® [QueryBuilder] ÌååÎùºÎØ∏ÌÑ∞:', params);
      throw error;
    }

    this.log('‚úÖ [QueryBuilder] ÌååÎùºÎØ∏ÌÑ∞ Í≤ÄÏ¶ù ÌÜµÍ≥º');
  }

  /**
   * ÎîîÎ≤ÑÍ∑∏ Î°úÍπÖ
   */
  private log(message: string, data?: any): void {
    if (this.debugMode) {
      if (data !== undefined) {
        console.log(message, data);
      } else {
        console.log(message);
      }
    }
  }

  /**
   * ÌòÑÏû¨ ÏÉÅÌÉú ÎîîÎ≤ÑÍπÖ
   */
  debug(): void {
    console.log('üîç [QueryBuilder] ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥:');
    console.log('- ÌòÑÏû¨ ÏøºÎ¶¨:', this.query);
    console.log('- ÌòÑÏû¨ ÌååÎùºÎØ∏ÌÑ∞:', this.params);
    console.log('- ? Í∞úÏàò:', (this.query.match(/\?/g) || []).length);
    console.log('- ÌååÎùºÎØ∏ÌÑ∞ Í∞úÏàò:', this.params.length);
  }
}

/**
 * Ìé∏Ïùò Ìï®ÏàòÎì§
 */

/**
 * ÌöåÏõê Í≤ÄÏÉâ ÏøºÎ¶¨ ÎπåÎçî
 */
export const buildMemberQuery = (filter: any) => {
  const builder = new QueryBuilder(`
    SELECT m.*, s.name as assigned_staff_name, s.position as assigned_staff_position
    FROM members m
    LEFT JOIN staff s ON m.assigned_staff_id = s.id
    WHERE m.deleted_at IS NULL
  `);

  // ÌôúÏÑ± ÏÉÅÌÉú ÌïÑÌÑ∞
  if (filter.active === true) {
    builder.addCondition('m.active', 1);
  } else if (filter.active === false) {
    builder.addCondition('m.active', 0);
  }

  // ÌÜµÌï© Í≤ÄÏÉâ (Ïù¥Î¶Ñ, Ï†ÑÌôîÎ≤àÌò∏, ÌöåÏõêÎ≤àÌò∏)
  if (filter.search) {
    builder.addOrGroup([
      { field: 'm.name', value: filter.search, operator: 'LIKE' },
      { field: 'm.phone', value: filter.search, operator: 'LIKE' },
      { field: 'm.member_number', value: filter.search, operator: 'LIKE' },
    ]);
  }

  // ÏÑ±Î≥Ñ ÌïÑÌÑ∞
  builder.addCondition('m.gender', filter.gender);

  // ÎÇ†Ïßú Î≤îÏúÑ ÌïÑÌÑ∞
  builder.addDateRange('m.join_date', filter.join_date_from, filter.join_date_to);
  builder.addDateRange('m.birth_date', filter.birth_date_from, filter.birth_date_to);

  // ÎÇòÏù¥ Î≤îÏúÑ ÌïÑÌÑ∞
  builder.addNumberRange(
    `CAST((julianday('now') - julianday(m.birth_date)) / 365.25 AS INTEGER)`,
    filter.age_min,
    filter.age_max
  );

  // Ïó∞ÎùΩÏ≤ò/Ïù¥Î©îÏùº Ïú†Î¨¥ ÌïÑÌÑ∞
  if (filter.has_phone === true) {
    builder.addCondition('m.phone', '', '!=');
  } else if (filter.has_phone === false) {
    builder.addOrGroup([
      { field: 'm.phone', value: null },
      { field: 'm.phone', value: '' },
    ]);
  }

  if (filter.has_email === true) {
    builder.addCondition('m.email', '', '!=');
  } else if (filter.has_email === false) {
    builder.addOrGroup([
      { field: 'm.email', value: null },
      { field: 'm.email', value: '' },
    ]);
  }

  // Îã¥ÎãπÏßÅÏõê ÌïÑÌÑ∞
  if (filter.assigned_staff_id && filter.assigned_staff_id !== 'all') {
    if (filter.assigned_staff_id === 'unassigned') {
      builder.addCondition('m.assigned_staff_id', null, 'IS');
    } else {
      builder.addCondition('m.assigned_staff_id', parseInt(filter.assigned_staff_id));
    }
  }

  // Ï†ïÎ†¨
  if (filter.sort) {
    const { field, direction } = filter.sort;
    const sortField = field === 'age' ? 'm.birth_date' : `m.${field}`;
    const sortDirection = field === 'age' && direction === 'asc' ? 'DESC' : direction.toUpperCase();
    builder.addOrderBy(sortField, sortDirection as 'ASC' | 'DESC');
  } else {
    builder.addOrderBy('m.created_at', 'DESC');
  }

  // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò
  if (filter.limit) {
    const offset = filter.page && filter.page > 1 ? (filter.page - 1) * filter.limit : 0;
    builder.addLimit(filter.limit, offset);
  }

  return builder;
};
