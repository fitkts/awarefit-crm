# 🎯 Awarefit CRM 개발 가이드라인

## 📋 프로젝트 개요

- **프로젝트명**: Awarefit CRM (피트니스 회원 관리 시스템)
- **기술 스택**: Electron + React + TypeScript + Tailwind CSS
- **데이터베이스**: SQLite (better-sqlite3)
- **테스트**: Jest (단위) + Playwright (E2E)

## 🔧 개발 환경 및 실행 명령어

```bash
# 개발 서버 실행 (Electron + Webpack)
npm run dev

# 웹만 실행 (브라우저 테스트용)
npm run dev:webpack

# Electron만 실행
npm run dev:electron

# E2E 테스트 실행
npx playwright test

# 단위 테스트 실행
npm test

# 타입 체크 (필수)
npm run type-check

# 린트 체크 (필수)
npm run lint
```

## 🔍 **코드 품질 관리 (필수!)** 

### ⚠️ **개발 전 필수 체크사항**

**모든 코드 변경 시 다음을 반드시 실행:**

1. **TypeScript 타입 체크**
   ```bash
   npm run type-check
   ```
   - 오류 없이 통과해야 함
   - any 타입 사용 최소화
   - 엄격한 타입 정의 준수

2. **ESLint 검사**
   ```bash
   npm run lint
   ```
   - 모든 린트 오류 해결 필수
   - 사용하지 않는 변수/import 제거
   - 코딩 스타일 가이드 준수

3. **오류 해결 우선순위**
   ```
   1순위: TypeScript 타입 오류
   2순위: ESLint 오류
   3순위: ESLint 경고
   ```

### 🚨 **커밋 전 필수 체크리스트**

- [ ] `npm run type-check` 통과
- [ ] `npm run lint` 통과  
- [ ] 콘솔에 오류 없음
- [ ] 기능 정상 작동 확인

## 🧪 **테스트 개발 필수 규칙** 

### ✅ **새 기능 개발 시**

- **새 페이지/컴포넌트 개발** → `e2e/{기능명}.spec.ts` 파일 생성
- **새 API 기능** → 해당 E2E 테스트에 API 테스트 케이스 추가
- **새 UI 요소** → `e2e/ui-elements.spec.ts`에 상호작용 테스트 추가

### ✅ **기존 기능 수정 시**

- **UI 텍스트 변경** → 해당 E2E 테스트의 선택자 업데이트
- **폼 필드 추가/수정** → `e2e/ui-elements.spec.ts` 폼 테스트 업데이트
- **네비게이션 변경** → `e2e/navigation.spec.ts` 업데이트

### ✅ **버그 수정 시**

- **버그 재현 테스트** 먼저 작성 (실패하는 테스트)
- **버그 수정 후** 해당 테스트가 통과하는지 확인
- **회귀 방지** 테스트 케이스 추가

### 📁 **테스트 파일 구조**

```
e2e/
├── navigation.spec.ts        # 페이지 이동, 메뉴 테스트
├── ui-elements.spec.ts       # 폼, 모달, 버튼 등 UI 테스트
├── api-error-handling.spec.ts # API 오류 및 환경 감지 테스트
├── performance.spec.ts       # 성능, 접근성 테스트
├── {새기능}.spec.ts         # 새 기능별 전용 테스트
└── app.spec.ts              # 기본 애플리케이션 테스트
```

## 💻 **코딩 스타일 가이드**

### **React 컴포넌트**

- **함수형 컴포넌트** 사용 (React.FC 타입)
- **Hook 기반** 상태 관리 (useState, useEffect)
- **TypeScript** 엄격한 타입 정의
- **Tailwind CSS** 스타일링

### **파일 명명 규칙**

- **컴포넌트**: PascalCase (MemberForm.tsx)
- **페이지**: PascalCase (Members.tsx)
- **훅**: camelCase, use prefix (useMemberData.ts)
- **유틸**: camelCase (memberUtils.ts)
- **타입**: camelCase interface (member.ts)

### **TypeScript 규칙**

```typescript
// ✅ 좋은 예
interface MemberFormProps {
  member?: MemberType;
  onSubmit: (data: MemberType) => void;
}

const MemberForm: React.FC<MemberFormProps> = ({ member, onSubmit }) => {
  const [formData, setFormData] = useState<MemberFormData>({
    name: member?.name || '',
    email: member?.email || '',
  });
  
  return <form>...</form>;
};

// ❌ 나쁜 예
const MemberForm = ({ member, onSubmit }: any) => {
  const [formData, setFormData] = useState<any>({});
  return <form>...</form>;
};
```

### **코드 구조**

```typescript
// 컴포넌트 기본 구조
import React from 'react';
import { MemberType } from '../types/member';

interface MemberFormProps {
  member?: MemberType;
  onSubmit: (data: MemberType) => void;
}

const MemberForm: React.FC<MemberFormProps> = ({ member, onSubmit }) => {
  // Hook 선언
  // 이벤트 핸들러
  // 렌더링
  return (
    <div className="space-y-4">
      {/* JSX */}
    </div>
  );
};

export default MemberForm;
```

## 📊 **데이터베이스 및 API 규칙**

### **Electron IPC 통신**

- **Main Process**: `src/main/ipc/{도메인}Handlers.ts`
- **Preload**: `src/main/preload.ts`에서 API 노출
- **Renderer**: `window.electronAPI.{도메인}.{메서드}()` 사용

### **오류 처리**

```typescript
try {
  const result = await window.electronAPI.member.create(memberData);
  toast.success('회원 등록이 완료되었습니다.');
} catch (error) {
  console.error('회원 등록 실패:', error);
  toast.error('회원 등록에 실패했습니다: ' + error.message);
}
```

## 🎨 **UI/UX 가이드라인**

### **디자인 시스템**

- **색상**: Tailwind 기본 팔레트 사용
- **간격**: space-y-4, p-4, m-4 등 일관된 간격
- **버튼**: 일관된 스타일 (primary, secondary, danger)
- **모달**: 배경 blur, 중앙 정렬, 반응형

### **접근성**

- **ARIA 레이블** 필수 (버튼, 폼 요소)
- **키보드 네비게이션** 지원
- **색상 대비** 4.5:1 이상
- **포커스 표시** 명확히

## 🚨 **주의사항 및 제약**

### **환경 호환성**

- **Electron 환경**에서 `electronAPI` 사용
- **웹 브라우저**에서는 오류 처리 필요
- **개발 시** 환경 감지 로직 포함

### **성능 최적화**

- **대용량 데이터** 페이지네이션 적용
- **이미지 최적화** 필요 시
- **메모리 누수** 방지 (useEffect cleanup)

## 📝 **커밋 메시지 규칙**

```bash
# 기능 추가
✨ feat: 새로운 PT 스케줄 기능 추가

# 버그 수정
🐛 fix: 회원 삭제 시 확인 모달 오류 수정

# 타입/린트 수정
🔧 fix: TypeScript 타입 오류 해결

# 테스트 추가
🧪 test: PT 스케줄 E2E 테스트 케이스 추가

# 스타일 변경
💄 style: 대시보드 카드 레이아웃 개선

# 리팩토링
♻️ refactor: 회원 관리 컴포넌트 구조 개선
```

## 🎯 **개발 워크플로우**

### **새 기능 개발 순서**

1. **기능 설계** 및 타입 정의
2. **TypeScript 타입 체크** 통과 확인
3. **컴포넌트 개발** (UI 우선)
4. **ESLint 검사** 통과 확인
5. **API 연동** (IPC 핸들러)
6. **E2E 테스트 작성** ← **필수!**
7. **최종 타입/린트 체크**
8. **수동 테스트** 및 디버깅
9. **커밋 및 푸시**

### **버그 수정 순서**

1. **버그 재현** 단계 확인
2. **실패하는 테스트** 먼저 작성
3. **버그 수정** 구현
4. **TypeScript/ESLint** 체크
5. **테스트 통과** 확인
6. **회귀 테스트** 추가
7. **커밋 및 푸시**

## 🔍 **코드 리뷰 체크리스트**

### **기능 개발 시**

- [ ] **TypeScript 타입 체크** 통과 (`npm run type-check`)
- [ ] **ESLint 검사** 통과 (`npm run lint`)
- [ ] TypeScript 타입 정의 완료
- [ ] 오류 처리 구현 완료
- [ ] **E2E 테스트 케이스 추가** ← **필수!**
- [ ] 접근성 가이드라인 준수
- [ ] 반응형 디자인 적용

### **버그 수정 시**

- [ ] **TypeScript/ESLint** 오류 없음
- [ ] 버그 재현 테스트 추가
- [ ] 근본 원인 해결 확인
- [ ] 관련 테스트 케이스 업데이트
- [ ] 회귀 방지 테스트 추가

## 🚀 **CI/CD 통과 조건**

- ✅ **TypeScript 컴파일** 성공
- ✅ **ESLint 검사** 통과
- ✅ **Jest 단위 테스트** 통과
- ✅ **Playwright E2E 테스트** 통과 (6개 브라우저)
- ✅ **Electron 빌드** 성공 (3개 OS)

---

**🎯 핵심 원칙: "코드 품질 → 기능 개발 → 테스트 개발"**  
**타입 체크와 린트를 반드시 통과한 후 개발을 진행하여 안정적인 시스템을 유지합니다!** 
## 🛡️ **SQL 및 데이터베이스 안전성 규칙**

### **SQL 쿼리 작성 시 필수 사항**

- **파라미터 바인딩 검증**: 쿼리의 `?` 개수와 파라미터 배열 길이가 일치해야 함
- **동적 쿼리 빌더**: 복잡한 필터링은 QueryBuilder 패턴 사용 권장
- **디버깅 로그**: 모든 SQL 실행 전 쿼리와 파라미터 로깅 필수
- **COUNT 쿼리 주의**: 페이지네이션 시 LIMIT/OFFSET 파라미터 제외 로직 검증

### **API 핸들러 작성 규칙**

```typescript
// ✅ 좋은 예: 파라미터 검증과 로깅
const handleDatabaseQuery = (filter: any) => {
  const query = buildQuery(filter);
  const params = buildParams(filter);
  
  console.log('🔍 [API] 쿼리:', query);
  console.log('🔍 [API] 파라미터:', params);
  console.log('🔍 [API] ? 개수:', (query.match(/\?/g) || []).length);
  
  if (params.length !== (query.match(/\?/g) || []).length) {
    throw new Error(`파라미터 개수 불일치: 쿼리 ${(query.match(/\?/g) || []).length}개, 파라미터 ${params.length}개`);
  }
  
  return db.prepare(query).all(params);
};

// ❌ 나쁜 예: 검증 없이 바로 실행
const badHandler = (filter: any) => {
  return db.prepare(someQuery).all(someParams); // 위험!
};
```

### **프론트엔드 API 호출 규칙**

```typescript
// ✅ 좋은 예: 에러 처리와 로깅
const callAPI = async (data: any) => {
  try {
    console.log('🔍 [Frontend] API 호출:', data);
    const result = await window.electronAPI.database.member.getAll(data);
    console.log('✅ [Frontend] API 성공:', result);
    return result;
  } catch (error) {
    console.error('🚨 [Frontend] API 실패:', error);
    throw error;
  }
};

// ❌ 나쁜 예: 에러 처리 없음
const badCall = (data: any) => {
  return window.electronAPI.database.member.getAll(data); // 위험!
};
```

## 🔄 **자동화 워크플로우 강화**

### **개발 시 자동 검증 순서**

1. **코드 작성 완료**
2. **npm run type-check** (타입 오류 검출)
3. **npm run lint** (코딩 스타일 검증)
4. **npm run test** (단위 테스트)
5. **npx playwright test** (E2E 테스트)
6. **수동 기능 테스트** (실제 사용 시나리오)

### **SQL 관련 코드 변경 시 추가 체크**

- [ ] 쿼리 빌더 패턴 사용 확인
- [ ] 파라미터 개수 검증 로직 포함
- [ ] 디버깅 로그 추가
- [ ] COUNT 쿼리 파라미터 처리 검증
- [ ] 페이지네이션 로직 테스트

## �� **즉시 수정 필요한 위험 패턴들**

### **절대 금지 패턴**

```typescript
// ❌ 절대 금지: 문자열 직접 삽입 (SQL Injection 위험)
const query = `SELECT * FROM members WHERE name = '${userInput}'`;

// ❌ 절대 금지: 파라미터 검증 없이 실행
db.prepare(query).all(params);

// ❌ 절대 금지: 에러 무시
try { /* API 호출 */ } catch { /* 아무것도 안함 */ }
```

### **즉시 리팩토링 대상**

```typescript
// 🔄 리팩토링 필요: 복잡한 동적 쿼리 빌딩
if (filter.a) query += ' AND a = ?';
if (filter.b) query += ' AND b = ?';
if (filter.c) query += ' AND c = ?';
// → QueryBuilder 패턴으로 변경 필요
```

## 🎯 **AI 코딩 지원 강화**

### **자동 완성 및 제안 활용**

- **Cursor의 AI 제안**: SQL 쿼리 작성 시 안전성 패턴 우선 제안
- **타입 추론**: TypeScript 엄격 모드로 런타임 오류 사전 방지
- **자동 리팩토링**: 위험한 패턴 감지 시 안전한 대안 제시

### **디버깅 자동화**

- **로그 표준화**: 모든 DB 쿼리에 일관된 로깅 패턴 적용
- **오류 분류**: SQL, API, UI 오류를 자동으로 분류하여 해결책 제시
- **성능 모니터링**: 느린 쿼리 자동 감지 및 최적화 제안

